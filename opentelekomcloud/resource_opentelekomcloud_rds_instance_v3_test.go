// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://www.github.com/huaweicloud/magic-modules
//
// ----------------------------------------------------------------------------

package opentelekomcloud

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform/helper/acctest"
	"github.com/hashicorp/terraform/helper/resource"
	"github.com/hashicorp/terraform/terraform"
	"github.com/huaweicloud/golangsdk"
)

func TestAccRdsInstanceV3_basic(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckRdsInstanceV3Destroy,
		Steps: []resource.TestStep{
			{
				Config: testAccRdsInstanceV3_basic(acctest.RandString(10)),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckRdsInstanceV3Exists(),
				),
			},
		},
	})
}

func testAccRdsInstanceV3_basic(val string) string {
	return fmt.Sprintf(`
resource "opentelekomcloud_networking_secgroup_v2" "secgroup" {
  name = "terraform_test_security_group%s"
  description = "terraform security group acceptance test"
}

resource "opentelekomcloud_rds_instance_v3" "instance" {
  availability_zone = "{%s}"
  db = {
    password = "Huangwei!120521"
    type = "PostgreSQL"
    version = "9.5.5"
    port = "8635"
    flavor = "rds.pg.s1.medium.ha"
  }
  name = "terraform_test_rds_instance%s"
  security_group_id = "${opentelekomcloud_networking_secgroup_v2.secgroup.id}"
  network_id = "{%s}"
  vpc_id = "{%s}" 
  volume {
    type = "COMMON"
    size = 100
  }
  ha_replication_mode = "async"
  backup_strategy = {
    start_time = "01:00:00"
    keep_days = 1
  }
}
	`, val, OS_AVAILABILITY_ZONE, val, OS_NETWORK_ID, OS_VPC_ID)
}

func testAccCheckRdsInstanceV3Destroy(s *terraform.State) error {
	config := testAccProvider.Meta().(*Config)
	client, err := config.sdkClient(OS_REGION_NAME, "rds", serviceProjectLevel)
	if err != nil {
		return fmt.Errorf("Error creating sdk client, err=%s", err)
	}

	for _, rs := range s.RootModule().Resources {
		if rs.Type != "opentelekomcloud_rds_instance_v3" {
			continue
		}

		_, err = fetchRdsInstanceV3ByListOnTest(rs, client)
		if err != nil {
			if strings.Index(err.Error(), "Error finding the resource by list api") != -1 {
				return nil
			}
			return err
		}
		return fmt.Errorf("opentelekomcloud_rds_instance_v3 still exists")
	}

	return nil
}

func testAccCheckRdsInstanceV3Exists() resource.TestCheckFunc {
	return func(s *terraform.State) error {
		config := testAccProvider.Meta().(*Config)
		client, err := config.sdkClient(OS_REGION_NAME, "rds", serviceProjectLevel)
		if err != nil {
			return fmt.Errorf("Error creating sdk client, err=%s", err)
		}

		rs, ok := s.RootModule().Resources["opentelekomcloud_rds_instance_v3.instance"]
		if !ok {
			return fmt.Errorf("Error checking opentelekomcloud_rds_instance_v3.instance exist, err=not found this resource")
		}

		_, err = fetchRdsInstanceV3ByListOnTest(rs, client)
		if err != nil {
			if strings.Index(err.Error(), "Error finding the resource by list api") != -1 {
				return fmt.Errorf("opentelekomcloud_rds_instance_v3 is not exist")
			}
			return fmt.Errorf("Error checking opentelekomcloud_rds_instance_v3.instance exist, err=%s", err)
		}
		return nil
	}
}

func fetchRdsInstanceV3ByListOnTest(rs *terraform.ResourceState,
	client *golangsdk.ServiceClient) (interface{}, error) {

	opts := map[string]interface{}{
		"availability_zone":   rs.Primary.Attributes["availability_zone"],
		"backup_strategy":     rs.Primary.Attributes["backup_strategy"],
		"db":                  rs.Primary.Attributes["db"],
		"ha_replication_mode": rs.Primary.Attributes["ha_replication_mode"],
		"name":                rs.Primary.Attributes["name"],
		"network_id":          rs.Primary.Attributes["network_id"],
		"param_group_id":      rs.Primary.Attributes["param_group_id"],
		"security_group_id":   rs.Primary.Attributes["security_group_id"],
		"volume":              rs.Primary.Attributes["volume"],
		"vpc_id":              rs.Primary.Attributes["vpc_id"],
	}

	arrayIndex := map[string]int{
		"backup_strategy": 0,
		"db":              0,
		"volume":          0,
	}

	identity := make(map[string]interface{})

	if v, err := navigateValue(opts, []string{"name"}, arrayIndex); err == nil {
		identity["name"] = v
	} else {
		return nil, err
	}

	identity["id"] = rs.Primary.ID

	p := make([]string, 0, 2)

	if v, err := convertToStr(identity["name"]); err == nil {
		p = append(p, fmt.Sprintf("name=%v", v))
	} else {
		return nil, err
	}

	if v, err := convertToStr(identity["id"]); err == nil {
		p = append(p, fmt.Sprintf("id=%v", v))
	} else {
		return nil, err
	}
	queryLink := "?" + strings.Join(p, "&")

	link := client.ServiceURL("instances") + queryLink

	return findRdsInstanceV3ByList(client, link, identity)
}
