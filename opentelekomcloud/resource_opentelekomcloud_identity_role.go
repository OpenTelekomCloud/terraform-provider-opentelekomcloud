// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://www.github.com/huaweicloud/magic-modules
//
// ----------------------------------------------------------------------------

package opentelekomcloud

import (
	"fmt"
	"log"
	"reflect"

	"github.com/hashicorp/terraform/helper/schema"
	"github.com/huaweicloud/golangsdk"
)

func resourceIdentityRole() *schema.Resource {
	return &schema.Resource{
		Create: resourceIdentityRoleCreate,
		Read:   resourceIdentityRoleRead,
		Update: resourceIdentityRoleUpdate,
		Delete: resourceIdentityRoleDelete,

		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},

		Schema: map[string]*schema.Schema{
			"region": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},

			"description": &schema.Schema{
				Type:     schema.TypeString,
				Required: true,
			},

			"display_layer": &schema.Schema{
				Type:     schema.TypeString,
				Required: true,
			},

			"display_name": &schema.Schema{
				Type:     schema.TypeString,
				Required: true,
			},

			"policy": &schema.Schema{
				Type:     schema.TypeList,
				Required: true,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"statement": &schema.Schema{
							Type:     schema.TypeList,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"action": &schema.Schema{
										Type:     schema.TypeList,
										Required: true,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"effect": &schema.Schema{
										Type:     schema.TypeString,
										Required: true,
									},
								},
							},
						},
						"version": &schema.Schema{
							Type:     schema.TypeString,
							Required: true,
						},
					},
				},
			},

			"catalog": &schema.Schema{
				Type:     schema.TypeString,
				Computed: true,
			},

			"domain_id": &schema.Schema{
				Type:     schema.TypeString,
				Computed: true,
			},

			"name": &schema.Schema{
				Type:     schema.TypeString,
				Computed: true,
			},
		},
	}
}

func resourceIdentityRoleCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)
	client, err := config.sdkClient(GetRegion(d, config), "identity")
	if err != nil {
		return fmt.Errorf("Error creating sdk client, err=%s", err)
	}
	client.Endpoint = "https://iam.eu-de.otc.t-systems.com/v3.0/"

	opts := make(map[string]interface{})
	opts["description"] = d.Get("description")
	opts["display_layer"] = d.Get("display_layer")
	opts["display_name"] = d.Get("display_name")
	opts["policy"] = d.Get("policy")

	params := make(map[string]interface{})

	roleProp, err := expandIdentityRoleCreateRole(opts, nil)
	if err != nil {
		return err
	}
	e, err := isEmptyValue(reflect.ValueOf(roleProp))
	if err != nil {
		return err
	}
	if !e {
		params["role"] = roleProp
	}

	log.Printf("[DEBUG] Creating new Role: %#v", params)

	url, err := replaceVars(d, "OS-ROLE/roles", nil)
	if err != nil {
		return err
	}
	url = client.ServiceURL(url)

	r := golangsdk.Result{}
	_, r.Err = client.Post(url, &params, &r.Body, &golangsdk.RequestOpts{
		OkCodes: successHTTPCodes,
	})
	if r.Err != nil {
		return fmt.Errorf("Error creating Role: %s", r.Err)
	}

	id, err := navigateValue(r.Body, []string{"role", "id"}, nil)
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id.(string))

	return resourceIdentityRoleRead(d, meta)
}

func resourceIdentityRoleRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)
	client, err := config.sdkClient(GetRegion(d, config), "identity")
	if err != nil {
		return fmt.Errorf("Error creating sdk client, err=%s", err)
	}
	client.Endpoint = "https://iam.eu-de.otc.t-systems.com/v3.0/"

	url, err := replaceVars(d, "OS-ROLE/roles/{id}", nil)
	if err != nil {
		return err
	}
	url = client.ServiceURL(url)

	r := golangsdk.Result{}
	_, r.Err = client.Get(
		url, &r.Body,
		&golangsdk.RequestOpts{MoreHeaders: map[string]string{"Content-Type": "application/json"}})
	if r.Err != nil {
		return fmt.Errorf("Error reading %s: %s", fmt.Sprintf("IdentityRole %q", d.Id()), r.Err)
	}
	res, ok := r.Body.(map[string]interface{})
	if !ok {
		return fmt.Errorf("Error reading %s: the result is not map", fmt.Sprintf("IdentityRole %q", d.Id()))
	}

	catalogProp, err := navigateValue(res, []string{"role", "catalog"}, nil)
	if err != nil {
		return fmt.Errorf("Error reading Role:catalog, err: %s", err)
	}
	if err := d.Set("catalog", catalogProp); err != nil {
		return fmt.Errorf("Error setting Role:catalog, err: %s", err)
	}

	domainIDProp, err := navigateValue(res, []string{"role", "domain_id"}, nil)
	if err != nil {
		return fmt.Errorf("Error reading Role:domain_id, err: %s", err)
	}
	if err := d.Set("domain_id", domainIDProp); err != nil {
		return fmt.Errorf("Error setting Role:domain_id, err: %s", err)
	}

	nameProp, err := navigateValue(res, []string{"role", "name"}, nil)
	if err != nil {
		return fmt.Errorf("Error reading Role:name, err: %s", err)
	}
	if err := d.Set("name", nameProp); err != nil {
		return fmt.Errorf("Error setting Role:name, err: %s", err)
	}

	return nil
}

func resourceIdentityRoleUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)
	client, err := config.sdkClient(GetRegion(d, config), "identity")
	if err != nil {
		return fmt.Errorf("Error creating sdk client, err=%s", err)
	}
	client.Endpoint = "https://iam.eu-de.otc.t-systems.com/v3.0/"

	opts := make(map[string]interface{})
	opts["description"] = d.Get("description")
	opts["display_layer"] = d.Get("display_layer")
	opts["display_name"] = d.Get("display_name")
	opts["policy"] = d.Get("policy")

	params := make(map[string]interface{})

	roleProp, err := expandIdentityRoleUpdateRole(opts, nil)
	if err != nil {
		return err
	}
	e, err := isEmptyValue(reflect.ValueOf(roleProp))
	if err != nil {
		return err
	}
	if !e {
		params["role"] = roleProp
	}

	log.Printf("[DEBUG] Updating Role %q: %#v", d.Id(), params)

	url, err := replaceVars(d, "OS-ROLE/roles/{id}", nil)
	if err != nil {
		return err
	}
	url = client.ServiceURL(url)

	r := golangsdk.Result{}
	_, r.Err = client.Patch(url, &params, &r.Body, &golangsdk.RequestOpts{
		OkCodes: successHTTPCodes,
	})
	if r.Err != nil {
		return fmt.Errorf("Error updating Role %q: %s", d.Id(), r.Err)
	}

	return resourceIdentityRoleRead(d, meta)
}

func resourceIdentityRoleDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)
	client, err := config.sdkClient(GetRegion(d, config), "identity")
	if err != nil {
		return fmt.Errorf("Error creating sdk client, err=%s", err)
	}
	client.Endpoint = "https://iam.eu-de.otc.t-systems.com/v3.0/"

	url, err := replaceVars(d, "OS-ROLE/roles/{id}", nil)
	if err != nil {
		return err
	}
	url = client.ServiceURL(url)

	log.Printf("[DEBUG] Deleting Role %q", d.Id())
	r := golangsdk.Result{}
	_, r.Err = client.Delete(url, &golangsdk.RequestOpts{
		OkCodes:      successHTTPCodes,
		JSONResponse: &r.Body,
		MoreHeaders:  map[string]string{"Content-Type": "application/json"},
	})
	if r.Err != nil {
		return fmt.Errorf("Error deleting Role %q: %s", d.Id(), r.Err)
	}

	return nil
}

func expandIdentityRoleCreateRole(d interface{}, arrayIndex map[string]int) (interface{}, error) {
	req := make(map[string]interface{})

	descriptionProp, err := navigateValue(d, []string{"description"}, arrayIndex)
	if err != nil {
		return nil, err
	}
	e, err := isEmptyValue(reflect.ValueOf(descriptionProp))
	if err != nil {
		return nil, err
	}
	if !e {
		req["description"] = descriptionProp
	}

	displayNameProp, err := navigateValue(d, []string{"display_name"}, arrayIndex)
	if err != nil {
		return nil, err
	}
	e, err = isEmptyValue(reflect.ValueOf(displayNameProp))
	if err != nil {
		return nil, err
	}
	if !e {
		req["display_name"] = displayNameProp
	}

	var localArrayIndex = make(map[string]int)

	if arrayIndex != nil {
		for k, v := range arrayIndex {
			localArrayIndex[k] = v
		}
	}
	localArrayIndex["policy"] = 0

	policyProp, err := expandIdentityRoleCreateRolePolicy(d, localArrayIndex)
	if err != nil {
		return nil, err
	}
	e, err = isEmptyValue(reflect.ValueOf(policyProp))
	if err != nil {
		return nil, err
	}
	if !e {
		req["policy"] = policyProp
	}

	typeProp, err := expandIdentityRoleCreateRoleType(d, arrayIndex)
	if err != nil {
		return nil, err
	}
	e, err = isEmptyValue(reflect.ValueOf(typeProp))
	if err != nil {
		return nil, err
	}
	if !e {
		req["type"] = typeProp
	}

	return req, nil
}

func expandIdentityRoleCreateRolePolicy(d interface{}, arrayIndex map[string]int) (interface{}, error) {
	req := make(map[string]interface{})

	statementProp, err := expandIdentityRoleCreateRolePolicyStatement(d, arrayIndex)
	if err != nil {
		return nil, err
	}
	e, err := isEmptyValue(reflect.ValueOf(statementProp))
	if err != nil {
		return nil, err
	}
	if !e {
		req["Statement"] = statementProp
	}

	versionProp, err := navigateValue(d, []string{"policy", "version"}, arrayIndex)
	if err != nil {
		return nil, err
	}
	e, err = isEmptyValue(reflect.ValueOf(versionProp))
	if err != nil {
		return nil, err
	}
	if !e {
		req["Version"] = versionProp
	}

	return req, nil
}

func expandIdentityRoleCreateRolePolicyStatement(d interface{}, arrayIndex map[string]int) (interface{}, error) {
	newArrayIndex := make(map[string]int)
	if arrayIndex != nil {
		for k, v := range arrayIndex {
			newArrayIndex[k] = v
		}
	}

	v, err := navigateValue(d, []string{"policy", "statement"}, newArrayIndex)
	if err != nil {
		return nil, err
	}

	n := len(v.([]interface{}))
	req := make([]interface{}, 0, n)
	for i := 0; i < n; i++ {
		newArrayIndex["statement"] = i
		transformed := make(map[string]interface{})

		actionProp, err := navigateValue(d, []string{"policy", "statement", "action"}, newArrayIndex)
		if err != nil {
			return nil, err
		}
		e, err := isEmptyValue(reflect.ValueOf(actionProp))
		if err != nil {
			return nil, err
		}
		if !e {
			transformed["Action"] = actionProp
		}

		effectProp, err := navigateValue(d, []string{"policy", "statement", "effect"}, newArrayIndex)
		if err != nil {
			return nil, err
		}
		e, err = isEmptyValue(reflect.ValueOf(effectProp))
		if err != nil {
			return nil, err
		}
		if !e {
			transformed["Effect"] = effectProp
		}

		req = append(req, transformed)
	}

	return req, nil
}

func expandIdentityRoleCreateRoleType(d interface{}, arrayIndex map[string]int) (interface{}, error) {
	v, err := navigateValue(d, []string{"display_layer"}, arrayIndex)
	if err != nil {
		return nil, err
	}
	if v == "domain" {
		return "AX", nil
	} else if v == "project" {
		return "XA", nil
	}
	return nil, fmt.Errorf("unknown display layer:%v", v)
}

func expandIdentityRoleUpdateRole(d interface{}, arrayIndex map[string]int) (interface{}, error) {
	req := make(map[string]interface{})

	descriptionProp, err := navigateValue(d, []string{"description"}, arrayIndex)
	if err != nil {
		return nil, err
	}
	e, err := isEmptyValue(reflect.ValueOf(descriptionProp))
	if err != nil {
		return nil, err
	}
	if !e {
		req["description"] = descriptionProp
	}

	displayNameProp, err := navigateValue(d, []string{"display_name"}, arrayIndex)
	if err != nil {
		return nil, err
	}
	e, err = isEmptyValue(reflect.ValueOf(displayNameProp))
	if err != nil {
		return nil, err
	}
	if !e {
		req["display_name"] = displayNameProp
	}

	var localArrayIndex = make(map[string]int)

	if arrayIndex != nil {
		for k, v := range arrayIndex {
			localArrayIndex[k] = v
		}
	}
	localArrayIndex["policy"] = 0

	policyProp, err := expandIdentityRoleUpdateRolePolicy(d, localArrayIndex)
	if err != nil {
		return nil, err
	}
	e, err = isEmptyValue(reflect.ValueOf(policyProp))
	if err != nil {
		return nil, err
	}
	if !e {
		req["policy"] = policyProp
	}

	typeProp, err := expandIdentityRoleUpdateRoleType(d, arrayIndex)
	if err != nil {
		return nil, err
	}
	e, err = isEmptyValue(reflect.ValueOf(typeProp))
	if err != nil {
		return nil, err
	}
	if !e {
		req["type"] = typeProp
	}

	return req, nil
}

func expandIdentityRoleUpdateRolePolicy(d interface{}, arrayIndex map[string]int) (interface{}, error) {
	req := make(map[string]interface{})

	statementProp, err := expandIdentityRoleUpdateRolePolicyStatement(d, arrayIndex)
	if err != nil {
		return nil, err
	}
	e, err := isEmptyValue(reflect.ValueOf(statementProp))
	if err != nil {
		return nil, err
	}
	if !e {
		req["Statement"] = statementProp
	}

	versionProp, err := navigateValue(d, []string{"policy", "version"}, arrayIndex)
	if err != nil {
		return nil, err
	}
	e, err = isEmptyValue(reflect.ValueOf(versionProp))
	if err != nil {
		return nil, err
	}
	if !e {
		req["Version"] = versionProp
	}

	return req, nil
}

func expandIdentityRoleUpdateRolePolicyStatement(d interface{}, arrayIndex map[string]int) (interface{}, error) {
	newArrayIndex := make(map[string]int)
	if arrayIndex != nil {
		for k, v := range arrayIndex {
			newArrayIndex[k] = v
		}
	}

	v, err := navigateValue(d, []string{"policy", "statement"}, newArrayIndex)
	if err != nil {
		return nil, err
	}

	n := len(v.([]interface{}))
	req := make([]interface{}, 0, n)
	for i := 0; i < n; i++ {
		newArrayIndex["statement"] = i
		transformed := make(map[string]interface{})

		actionProp, err := navigateValue(d, []string{"policy", "statement", "action"}, newArrayIndex)
		if err != nil {
			return nil, err
		}
		e, err := isEmptyValue(reflect.ValueOf(actionProp))
		if err != nil {
			return nil, err
		}
		if !e {
			transformed["Action"] = actionProp
		}

		effectProp, err := navigateValue(d, []string{"policy", "statement", "effect"}, newArrayIndex)
		if err != nil {
			return nil, err
		}
		e, err = isEmptyValue(reflect.ValueOf(effectProp))
		if err != nil {
			return nil, err
		}
		if !e {
			transformed["Effect"] = effectProp
		}

		req = append(req, transformed)
	}

	return req, nil
}

func expandIdentityRoleUpdateRoleType(d interface{}, arrayIndex map[string]int) (interface{}, error) {
	v, err := navigateValue(d, []string{"display_layer"}, arrayIndex)
	if err != nil {
		return nil, err
	}
	if v == "domain" {
		return "AX", nil
	} else if v == "project" {
		return "XA", nil
	}
	return nil, fmt.Errorf("unknown display layer:%v", v)
}
